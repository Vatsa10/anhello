"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authAPI: function() { return /* binding */ authAPI; },\n/* harmony export */   blogPostsAPI: function() { return /* binding */ blogPostsAPI; },\n/* harmony export */   clientsAPI: function() { return /* binding */ clientsAPI; },\n/* harmony export */   uploadAPI: function() { return /* binding */ uploadAPI; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\nconst API_BASE_URL = \"http://localhost:8000\" || 0;\nconst api = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: API_BASE_URL,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\n// Simple authentication - no JWT tokens needed\nconst authAPI = {\n    login: async (credentials)=>{\n        const formData = new FormData();\n        formData.append(\"email\", credentials.email);\n        formData.append(\"password\", credentials.password);\n        const response = await api.post(\"/login\", formData, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        });\n        return response.data;\n    },\n    getCurrentUser: async ()=>{\n        // For simple auth, we'll use a different approach\n        // Send credentials with each request as form data\n        const formData = new FormData();\n        formData.append(\"email\", \"admin@example.com\");\n        formData.append(\"password\", \"admin123\");\n        const response = await api.get(\"/users/me\", {\n            data: formData\n        });\n        return response.data;\n    }\n};\n// Clients API\nconst clientsAPI = {\n    getAll: async ()=>{\n        const formData = new FormData();\n        formData.append(\"email\", \"admin@example.com\");\n        formData.append(\"password\", \"admin123\");\n        const response = await api.get(\"/clients/\", {\n            data: formData\n        });\n        return response.data;\n    },\n    getById: async (id)=>{\n        const formData = new FormData();\n        formData.append(\"email\", \"admin@example.com\");\n        formData.append(\"password\", \"admin123\");\n        const response = await api.get(\"/clients/\".concat(id), {\n            data: formData\n        });\n        return response.data;\n    },\n    create: async (client)=>{\n        const formData = new FormData();\n        formData.append(\"email\", \"admin@example.com\");\n        formData.append(\"password\", \"admin123\");\n        formData.append(\"name\", client.name);\n        formData.append(\"domain\", client.domain);\n        const response = await api.post(\"/clients/\", formData, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        });\n        return response.data;\n    }\n};\n// Blog Posts API\nconst blogPostsAPI = {\n    getAll: async (params)=>{\n        const formData = new FormData();\n        formData.append(\"email\", \"admin@example.com\");\n        formData.append(\"password\", \"admin123\");\n        const response = await api.get(\"/blogs/\", {\n            data: formData,\n            params\n        });\n        return response.data;\n    },\n    getById: async (id)=>{\n        const formData = new FormData();\n        formData.append(\"email\", \"admin@example.com\");\n        formData.append(\"password\", \"admin123\");\n        const response = await api.get(\"/blogs/\".concat(id), {\n            data: formData\n        });\n        return response.data;\n    },\n    create: async (blogPost)=>{\n        const formData = new FormData();\n        formData.append(\"email\", \"admin@example.com\");\n        formData.append(\"password\", \"admin123\");\n        Object.keys(blogPost).forEach((key)=>{\n            const value = blogPost[key];\n            if (value !== undefined) {\n                formData.append(key, String(value));\n            }\n        });\n        const response = await api.post(\"/blogs/\", formData, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        });\n        return response.data;\n    },\n    update: async (id, blogPost)=>{\n        const formData = new FormData();\n        formData.append(\"email\", \"admin@example.com\");\n        formData.append(\"password\", \"admin123\");\n        Object.keys(blogPost).forEach((key)=>{\n            const value = blogPost[key];\n            if (value !== undefined) {\n                formData.append(key, String(value));\n            }\n        });\n        const response = await api.put(\"/blogs/\".concat(id), formData, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        });\n        return response.data;\n    },\n    delete: async (id)=>{\n        const formData = new FormData();\n        formData.append(\"email\", \"admin@example.com\");\n        formData.append(\"password\", \"admin123\");\n        const response = await api.delete(\"/blogs/\".concat(id), {\n            data: formData\n        });\n        return response.data;\n    }\n};\n// File upload API\nconst uploadAPI = {\n    uploadImage: async (file)=>{\n        const formData = new FormData();\n        formData.append(\"email\", \"admin@example.com\");\n        formData.append(\"password\", \"admin123\");\n        formData.append(\"file\", file);\n        const response = await api.post(\"/upload/\", formData, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        });\n        return response.data;\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (api);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});